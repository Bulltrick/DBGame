//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DBGame
{
    using System;
    using System.Collections.Generic;
    
    public partial class Army
    {
        public Army()
        {
            this.Tile = new HashSet<Tile>();
            this.Unit = new HashSet<Unit>();
        }
    
        public int ArmyID { get; set; }
        public int PlayerID { get; set; }
        public string ArmyName { get; set; }
        public Nullable<int> ArmyMaxMovement { get; set; }
        public Nullable<int> ArmyMovement { get; set; }
        public bool ArmyBacklineProtected { get; set; }
    
        public virtual Player Player { get; set; }
        public virtual ICollection<Tile> Tile { get; set; }
        public virtual ICollection<Unit> Unit { get; set; }

        public Army(string ArmyName, List<Unit> UnitList, int OwnedBy)
        {
            this.ArmyName = ArmyName;
            Unit = UnitList;
            PlayerID = OwnedBy;
            ArmyMaxMovement = 2;
            ArmyMovement = 2;
            int front = 0;
            int back = 0;
            foreach (Unit un in Unit)
            {
                if (un.UnitPosition == 1) front++;
                else if (un.UnitPosition == 2) back++;
            }
            //if ((back / (1.2 * front)) >= 1.0) backlineProtected = true;
            //else backlineProtected = false;
            // BACKLINEPROTECTED EI DBSSÄ!
        }

        public void Attack(Army target)
        {
            foreach (Unit a in Unit)
            {
                foreach (Unit t in target.Unit)
                {
                    if (a.UnitRanged)
                    {
                        if (target.ArmyBacklineProtected && t.UnitPosition == 2) a.Rattack(t);
                        else if (t.UnitPosition == 1) a.Rattack(t);
                    }
                    else
                    {
                        if (target.ArmyBacklineProtected && t.UnitPosition == 2) a.attack(t);
                        else if (t.UnitPosition == 1) a.attack(t);
                    }
                }
            }
        }

        public void AddUnit(Unit u)
        {
            Unit.Add(u);
            int front = 0;
            int back = 0;
            foreach (Unit un in Unit)
            {
                if (un.UnitPosition == 1) front++;
                else if (un.UnitPosition == 2) back++;
            }
            if ((back / (1.2 * front)) >= 1.0) ArmyBacklineProtected = true;
            else ArmyBacklineProtected = false;
        }

        public bool CheckHP()
        {
            bool destroyed = true;
            List<Unit> newUnits = new List<Unit>();
            foreach (Unit u in Unit)
            {
                if (u.UnitHealth > 0)
                {
                    newUnits.Add(u);
                    destroyed = false;
                }
            }
            Unit = newUnits;
            return destroyed;
        }
    }
}
